  Cgroup="emlib"   Csub="Framework"/>
    </condition>
    <condition id="emlib SYSTEM">
      <description>Silicon Labs emlib with SYSTEM</description>
      <require condition="EFM32WG"/>
      <require Cclass="Device"        Cgroup="emlib"   Csub="Framework"/>
      <require Cclass="Device"        Cgroup="emlib"   Csub="SYSTEM"/>
    </condition>
    <condition id="emlib EMU">
      <description>Silicon Labs emlib with EMU</description>
      <require condition="EFM32WG"/>
      <require Cclass="Device"        Cgroup="emlib"   Csub="Framework"/>
      <require Cclass="Device"        Cgroup="emlib"   Csub="EMU"/>
    </condition>
    <condition id="emlib CMU">
      <description>Silicon Labs emlib with CMU</description>
      <require condition="EFM32WG"/>
      <require Cclass="Device"        Cgroup="emlib"   Csub="Framework"/>
      <require Cclass="Device"        Cgroup="emlib"   Csub="CMU"/>
    </condition>
    <condition id="emlib CMU SYSTEM">
      <description>Silicon Labs emlib with CMU, SYSTEM</description>
      <require condition="EFM32WG"/>
      <require Cclass="Device"        Cgroup="emlib"   Csub="Framework"/>
      <require Cclass="Device"        Cgroup="emlib"   Csub="CMU"/>
      <require Cclass="Device"        Cgroup="emlib"   Csub="SYSTEM"/>
    </condition>
    <condition id="emlib CMU SYSTEM CORE">
      <description>Silicon Labs emlib with CMU, SYSTEM, CORE</description>
      <require condition="EFM32WG"/>
      <require Cclass="Device"        Cgroup="emlib"   Csub="Framework"/>
      <require Cclass="Device"        Cgroup="emlib"   Csub="CMU"/>
      <require Cclass="Device"        Cgroup="emlib"   Csub="SYSTEM"/>
      <require Cclass="Device"        Cgroup="emlib"   Csub="CORE"/>
    </condition>
    <condition id="emlib CMU GPIO">
      <description>Silicon Labs emlib with CMU, GPIO</description>
      <require condition="EFM32WG"/>
      <require Cclass="Device"        Cgroup="emlib"   Csub="Framework"/>
      <require Cclass="Device"        Cgroup="emlib"   Csub="CMU"/>
      <require Cclass="Device"        Cgroup="emlib"   Csub="GPIO"/>
    </condition>

    <!-- bsp Conditions -->
    <condition id="EFM32WG BSP core">
      <description>EFM32WG STK3800 Board Support Core</description>
      <require condition="EFM32WG"/>
      <require Cclass="Device"        Cgroup="emlib"   Csub="GPIO"/>
      <require Cclass="Device"        Cgroup="emlib"   Csub="CMU"/>
      <require Cclass="Device"        Cgroup="emlib"   Csub="EBI"/>
      <require Cclass="Device"        Cgroup="emlib"   Csub="MSC"/>
      <require Cclass="Device"        Cgroup="emlib"   Csub="USART"/>
    </condition>

    <condition id="EFM32WG BSP">
      <description>EFM32WG Board Support Package</description>
      <require condition="EFM32WG"/>
      <require Cclass="Board Support" Cgroup="CORE"/>
    </condition>

  </conditions>

  <taxonomy>
    <description Cclass="Device"        Cgroup="emlib"   doc="emdoc/efm32wg/html/group__emlib.html" >Silicon Labs Low-level peripheral library</description>
  </taxonomy>

  <components>
    <!-- Startup -->
    <component Cclass="Device" Cgroup="Startup"                      Cversion="5.1.3" condition="EFM32WG CMSIS">
      <description>System Startup for Silicon Labs EFM32WG device series</description>
      <files>
        <file category="doc"          name="emdoc/efm32wg/html/index.html"/>

        <file category="include"      name="Device/EFM32WG/Include/"/>
        <file category="sourceAsm"    name="Device/EFM32WG/Source/ARM/startup_efm32wg.s" attr="config" version="5.1.3" condition="Compiler ARMCC"/>
        <file category="sourceC"      name="Device/EFM32WG/Source/GCC/startup_efm32wg.S" attr="config" version="5.1.3" condition="Compiler GCC"  />
        <file category="linkerScript" name="Device/EFM32WG/Source/GCC/efm32wg.ld"        attr="config" version="5.1.3" condition="Compiler GCC"/>
        <file category="sourceC"      name="Device/EFM32WG/Source/system_efm32wg.c"      attr="config" version="5.1.3"/>
        <!-- device configuration required by drivers at the moment -->
        <!--file category="header"       name="RTE_Driver/Config/RTE_Device.h"            attr="config" version="2.0.2"/-->
      </files>
    </component>
    <component Cclass="Device" Cgroup="Startup" Cvariant="C Startup" Cversion="5.1.3" condition="EFM32WG CMSIS GCC">
      <description>System Startup for Silicon Labs EFM32WG device series</description>
      <files>
        <file category="doc"          name="emdoc/efm32wg/html/index.html"/>

        <file category="include"      name="Device/EFM32WG/Include/"/>
        <file category="sourceC"      name="Device/EFM32WG/Source/GCC/startup_efm32wg.c" attr="config" version="5.1.3" condition="Compiler GCC"/>
        <file category="linkerScript" name="Device/EFM32WG/Source/GCC/efm32wg.ld"        attr="config" version="5.1.3" condition="Compiler GCC"/>
        <file category="sourceC"      name="Device/EFM32WG/Source/system_efm32wg.c"      attr="config" version="5.1.3"/>
        <!-- device configuration required by drivers at the moment -->
        <!--file category="header"       name="RTE_Driver/Config/RTE_Device.h"            attr="config" version="2.0.2"/-->
      </files>
    </component>

    <!-- emlib -->
    <component Cclass="Device" Cgroup="emlib" Csub="Framework" Cversion="5.1.3" condition="EFM32WG">
      <description>emlib Framework</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_FRAMEWORK
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__emlib.html"/>
        <file category="header"  name="emlib/inc/em_common.h"/>
        <file category="header"  name="emlib/inc/em_chip.h"/>
        <file category="header"  name="emlib/inc/em_bus.h"/>
        <file category="header"  name="emlib/inc/em_version.h"/>
        <file category="header"  name="emlib/inc/em_assert.h"/>
        <file category="source"  name="emlib/src/em_assert.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="ACMP"      Cversion="5.1.3" condition="emlib Framework">
      <description>Analog comparator (ACMP) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_ACMP
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__ACMP.html"/>
        <file category="header"  name="emlib/inc/em_acmp.h"/>
        <file category="source"  name="emlib/src/em_acmp.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="ADC"       Cversion="5.1.3" condition="emlib CMU">
      <description>Analog to Digital Converter (ADC) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_ADC
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__ADC.html"/>
        <file category="header"  name="emlib/inc/em_adc.h"/>
        <file category="source"  name="emlib/src/em_adc.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="AES"       Cversion="5.1.3" condition="emlib Framework">
      <description>Advanced Encryption Standard Accelerator (AES) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_AES
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__AES.html"/>
        <file category="header"  name="emlib/inc/em_aes.h"/>
        <file category="source"  name="emlib/src/em_aes.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="BURTC"     Cversion="5.1.3" condition="emlib Framework">
      <description>Backup Real Time Counter (BURTC) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_BURTC
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__BURTC.html"/>
        <file category="header"  name="emlib/inc/em_burtc.h"/>
        <file category="source"  name="emlib/src/em_burtc.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="CMU"       Cversion="5.1.3" condition="emlib EMU">
      <description>Clock management unit (CMU) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_CMU
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__CMU.html"/>
        <file category="header"  name="emlib/inc/em_cmu.h"/>
        <file category="source"  name="emlib/src/em_cmu.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="CORE"      Cversion="5.1.3" condition="emlib Framework">
      <description>General purpose utilities and cross-compiler support</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_CORE
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__CORE.html"/>
        <file category="header"  name="emlib/inc/em_core.h"/>
        <file category="source"  name="emlib/src/em_core.c"/>
      </files>
    </component>
    <!-- (not available) component Cclass="Device" Cgroup="emlib" Csub="CRYOTIMER" Cversion="5.1.3" condition="emlib Framework">
      <description>Ultra Low Energy Timer/Counter (CRYOTIMER) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_CRYOTIMER
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__CRYOTIMER.html"/>
        <file category="header"  name="emlib/inc/em_cryotimer.h"/>
        <file category="source"  name="emlib/src/em_cryotimer.c"/>
      </files>
    </component-->
    <!-- (not available) component Cclass="Device" Cgroup="emlib" Csub="CRYPTO"    Cversion="5.1.3" condition="emlib Framework">
      <description>Cryptography accelerator peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_CRYOPTO
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__CRYPTO.html"/>
        <file category="header"  name="emlib/inc/em_crypto.h"/>
        <file category="source"  name="emlib/src/em_crypto.c"/>
      </files>
    </component-->
    <!-- (not available) component Cclass="Device" Cgroup="emlib" Csub="CSEN"      Cversion="5.1.3" condition="emlib CMU">
      <description>Capacitive Sense (CSEN) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_CSEN
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__CSEN.html"/>
        <file category="header"  name="emlib/inc/em_csen.h"/>
        <file category="source"  name="emlib/src/em_csen.c"/>
      </files>
    </component-->
    <component Cclass="Device" Cgroup="emlib" Csub="DAC"       Cversion="5.1.3" condition="emlib CMU">
      <description>Digital to Analog Converter (DAC) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_DAC
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__DAC.html"/>
        <file category="header"  name="emlib/inc/em_dac.h"/>
        <file category="source"  name="emlib/src/em_dac.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="DBG"       Cversion="5.1.3" condition="emlib CMU GPIO">
      <description>Debug (DBG) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_DBG
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__DBG.html"/>
        <file category="header"  name="emlib/inc/em_dbg.h"/>
        <file category="source"  name="emlib/src/em_dbg.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="DMA"       Cversion="5.1.3" condition="emlib CMU">
      <description>Direct Memory Access (DMA) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_DMA
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__DMA.html"/>
        <file category="header"  name="emlib/inc/em_dma.h"/>
        <file category="source"  name="emlib/src/em_dma.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="EBI"       Cversion="5.1.3" condition="emlib Framework">
      <description>EBI External Bus Interface (EBI) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_EBI
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__EBI.html"/>
        <file category="header"  name="emlib/inc/em_ebi.h"/>
        <file category="source"  name="emlib/src/em_ebi.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="EMU"       Cversion="5.1.3" condition="emlib CMU SYSTEM">
      <description>Energy Management Unit (EMU) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_EMU
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__EMU.html"/>
        <file category="header"  name="emlib/inc/em_emu.h"/>
        <file category="source"  name="emlib/src/em_emu.c"/>
      </files>
    </component>
    <!-- (not available) component Cclass="Device" Cgroup="emlib" Csub="GPCRC"     Cversion="5.1.3" condition="emlib Framework">
      <description>General Purpose Cyclic Redundancy Check (GPCRC) API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_GPCRC
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__GPCRC.html"/>
        <file category="header"  name="emlib/inc/em_gpcrc.h"/>
        <file category="source"  name="emlib/src/em_gpcrc.c"/>
      </files>
    </component!-->
    <component Cclass="Device" Cgroup="emlib" Csub="GPIO"      Cversion="5.1.3" condition="emlib Framework">
      <description>General Purpose Input/Output (GPIO) API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_GPIO
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__GPIO.html"/>
        <file category="header"  name="emlib/inc/em_gpio.h"/>
        <file category="source"  name="emlib/src/em_gpio.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="I2C"       Cversion="5.1.3" condition="emlib CMU">
      <description>Inter-integrated Circuit (I2C) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_I2C
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__I2C.html"/>
        <file category="header"  name="emlib/inc/em_i2c.h"/>
        <file category="source"  name="emlib/src/em_i2c.c"/>
      </files>
    </component>
    <!-- (not available) component Cclass="Device" Cgroup="emlib" Csub="IDAC"      Cversion="5.1.3" condition="emlib CMU">
      <description>Current Digital to Analog Converter (IDAC) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_IDAC
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__IDAC.html"/>
        <file category="header"  name="emlib/inc/em_idac.h"/>
        <file category="source"  name="emlib/src/em_idac.c"/>
      </files>
    </component-->
    <component Cclass="Device" Cgroup="emlib" Csub="INT"       Cversion="5.1.3" condition="emlib Framework">
      <deprecated>1</deprecated>
      <description>Safe nesting interrupt disable/enable API (deprecated!)</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_INT
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__INT.html"/>
        <file category="header"  name="emlib/inc/em_int.h"/>
        <file category="source"  name="emlib/src/em_int.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="LCD"       Cversion="5.1.3" condition="emlib Framework">
      <description>Liquid Crystal Display (LCD) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_LCD
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__LCD.html"/>
        <file category="header"  name="emlib/inc/em_lcd.h"/>
        <file category="source"  name="emlib/src/em_lcd.c"/>
      </files>
    </component>
    <!-- (not available) component Cclass="Device" Cgroup="emlib" Csub="LDMA"      Cversion="5.1.3" condition="emlib CMU SYSTEM CORE">
      <description>Linked Direct Memory Access (LDMA) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_LDMA
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__LDMA.html"/>
        <file category="header"  name="emlib/inc/em_ldma.h"/>
        <file category="source"  name="emlib/src/em_ldma.c"/>
      </files>
    </component-->
    <component Cclass="Device" Cgroup="emlib" Csub="LESENSE"   Cversion="5.1.3" condition="emlib CMU">
      <description>Low Energy Sensor (LESENSE) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_LESENSE
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__LESENSE.html"/>
        <file category="header"  name="emlib/inc/em_lesense.h"/>
        <file category="source"  name="emlib/src/em_lesense.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="LETIMER"   Cversion="5.1.3" condition="emlib CMU">
      <description>Low Energy Timer (LETIMER) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_LETIMER
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__LETIMER.html"/>
        <file category="header"  name="emlib/inc/em_letimer.h"/>
        <file category="source"  name="emlib/src/em_letimer.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="LEUART"    Cversion="5.1.3" condition="emlib CMU">
      <description>Low Energy Universal Asynchronous Receiver/Transmitter (LEUART) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_LEUART
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__LEUART.html"/>
        <file category="header"  name="emlib/inc/em_leuart.h"/>
        <file category="source"  name="emlib/src/em_leuart.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="MPU"       Cversion="5.1.3" condition="emlib Framework">
      <description>Memory Protection Unit (MPU) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_MPU
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__MPU.html"/>
        <file category="header"  name="emlib/inc/em_mpu.h"/>
        <file category="source"  name="emlib/src/em_mpu.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="MSC"       Cversion="5.1.3" condition="emlib CMU SYSTEM">
      <description>Flash controller (MSC) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_MSC
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__MSC.html"/>
        <file category="header"  name="emlib/inc/em_msc.h"/>
        <file category="source"  name="emlib/src/em_msc.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="OPAMP"     Cversion="5.1.3" condition="emlib SYSTEM">
      <description>Operational Amplifier (OPAMP) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_OPAMP
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__OPAMP.html"/>
        <file category="header"  name="emlib/inc/em_opamp.h"/>
        <file category="source"  name="emlib/src/em_opamp.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="PCNT"      Cversion="5.1.3" condition="emlib CMU">
      <description>Pulse Counter (PCNT) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_PCNT
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__PCNT.html"/>
        <file category="header"  name="emlib/inc/em_pcnt.h"/>
        <file category="source"  name="emlib/src/em_pcnt.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="PRS"       Cversion="5.1.3" condition="emlib Framework">
      <description>Peripheral Reflex System (PRS) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_PRS
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__PRS.html"/>
        <file category="header"  name="emlib/inc/em_prs.h"/>
        <file category="source"  name="emlib/src/em_prs.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="RAMFUNC"   Cversion="5.1.3" condition="emlib Framework">
      <description>RAM code support</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_RAMFUNC
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__RAMFUNC.html"/>
        <file category="header"  name="emlib/inc/em_ramfunc.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="RMU"       Cversion="5.1.3" condition="emlib Framework">
      <description>Reset Management Unit (RMU) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_RMU
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__RMU.html"/>
        <file category="header"  name="emlib/inc/em_rmu.h"/>
        <file category="source"  name="emlib/src/em_rmu.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="RTC"       Cversion="5.1.3" condition="emlib Framework">
      <description>Real Time Counter (RTC) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_RTC
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__RTC.html"/>
        <file category="header"  name="emlib/inc/em_rtc.h"/>
        <file category="source"  name="emlib/src/em_rtc.c"/>
      </files>
    </component>
    <!-- (not available) component Cclass="Device" Cgroup="emlib" Csub="RTCC"      Cversion="5.1.3" condition="emlib Framework">
      <description>Real Time Counter (RTCC) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_RTCC
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__RTCC.html"/>
        <file category="header"  name="emlib/inc/em_rtcc.h"/>
        <file category="source"  name="emlib/src/em_rtcc.c"/>
      </files>
    </component-->
    <!-- (not available) component Cclass="Device" Cgroup="emlib" Csub="SMU"       Cversion="5.1.3" condition="emlib Framework">
      <description>Security Management Unit (SMU) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_SMU
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__SMU.html"/>
        <file category="header"  name="emlib/inc/em_smu.h"/>
      </files>
    </component-->
    <component Cclass="Device" Cgroup="emlib" Csub="SYSTEM"    Cversion="5.1.3" condition="emlib Framework">
      <description>System API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_SYSTEM
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__SYSTEM.html"/>
        <file category="header"  name="emlib/inc/em_system.h"/>
        <file category="source"  name="emlib/src/em_system.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="TIMER"     Cversion="5.1.3" condition="emlib Framework">
      <description>Timer/Counter (TIMER) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_TIMER
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__TIMER.html"/>
        <file category="header"  name="emlib/inc/em_timer.h"/>
        <file category="source"  name="emlib/src/em_timer.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="USART"     Cversion="5.1.3" condition="emlib CMU">
      <description>Universal Synchronous/Asynchronous Receiver/Transmitter (USART) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_USART
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__USART.html"/>
        <file category="header"  name="emlib/inc/em_usart.h"/>
        <file category="source"  name="emlib/src/em_usart.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="emlib" Csub="VCMP"      Cversion="5.1.3" condition="emlib Framework">
      <description>Voltage Comparator (VCMP) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_VCMP
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__VCMP.html"/>
        <file category="header"  name="emlib/inc/em_vcmp.h"/>
        <file category="source"  name="emlib/src/em_vcmp.c"/>
      </files>
    </component>
    <!-- (not available) component Cclass="Device" Cgroup="emlib" Csub="VDAC"      Cversion="5.1.3" condition="emlib CMU">
      <description>Digital to Analog Voltage Converter (VDAC) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_VDAC
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__VDAC.html"/>
        <file category="header"  name="emlib/inc/em_vdac.h"/>
        <file category="source"  name="emlib/src/em_vdac.c"/>
      </files>
    </component-->
    <component Cclass="Device" Cgroup="emlib" Csub="WDOG"      Cversion="5.1.3" condition="emlib Framework">
      <description>Watchdog (WDOG) Peripheral API</description>
      <RTE_Components_h>
        #define RTE_DEVICE_EMLIB_WDOG
      </RTE_Components_h>
      <files>
        <file category="doc"     name="emdoc/efm32wg/html/group__WDOG.html"/>
        <file category="header"  name="emlib/inc/em_wdog.h"/>
        <file category="source"  name="emlib/src/em_wdog.c"/>
      </files>
    </component>

    <bundle Cbundle="EFM32WG-STK3800" Cclass="Board Support" Cversion="5.1.3">
      <description>Silicon Labs EFM32WG-STK3800 Development Kit</description>
      <doc>Boards/SiliconLabs/EFM32WG_STK3800/Documents/efm32wg-stk3800-ug.pdf</doc>

      <component Cgroup="CORE" condition="EFM32WG BSP core">
        <description>Silicon Labs BSP Core</description>
        <RTE_Components_h>
          #define RTE_BOARD_SUPPORT_STK3800
        </RTE_Components_h>
        <files>
          <file category="doc"     name="emdoc/efm32wg/html/group__kitdrv.html"/>
          <file category="header"  name="Boards/SiliconLabs/common/bsp/bsp.h"/>
          <file category="source"  name="Boards/SiliconLabs/common/bsp/bsp_bcc.c"/>
          <file category="source"  name="Boards/SiliconLabs/common/bsp/bsp_stk.c"/>
          <file category="source"  name="Boards/SiliconLabs/common/bsp/bsp_stk_leds.c"/>
          <file category="header"  name="Boards/SiliconLabs/common/bsp/bsp_trace.h"/>
          <file category="source"  name="Boards/SiliconLabs/common/bsp/bsp_trace.c"/>
          <file category="include" name="Boards/SiliconLabs/EFM32WG_STK3800/config/"/>
        </files>
      </component>

      <component Cgroup="LED" Capiversion="1.0.0" condition="EFM32WG BSP">
        <description>LED interface for Silicon Labs EFM32WG-STK3800 Development Kit</description>
        <files>
          <file category="source"  name="Boards/SiliconLabs/EFM32WG_STK3800/Common/LED_STK3800.c"/>
        </files>
      </component>
      <component Cgroup="Buttons" Capiversion="1.0.0" condition="EFM32WG BSP">
        <description>Buttons interface for Silicon Labs EFM32WG-STK3800 Development Kit</description>
        <files>
          <file category="source"  name="Boards/SiliconLabs/EFM32WG_STK3800/Common/Buttons_STK3800.c"/>
        </files>
      </component>
    </bundle>
  </components>

  <boards>
    <board vendor="Silicon Labs" name="EFM32WG-STK3800" revision="Ver 1.0">
      <description>Silicon Labs EFM32WG Starter Kit</description>
      <image small="Boards/SiliconLabs/EFM32WG_STK3800/Documents/efm32wg-stk3800_small.png"/>
      <book category="overview"  name="http://www.silabs.com/products/mcu/lowpower/pages/efm32wg-stk3800.aspx" title="EFM32TG-STK3300 Web Page"/>
      <book category="manual"    name="Boards/SiliconLabs/EFM32WG_STK3800/Documents/efm32wg-stk3800-ug.pdf" title="User Manual"/>
      <book category="schematic" name="Boards/SiliconLabs/EFM32WG_STK3800/Documents/BRD2400A_A00.pdf"       title="Schematics"/>
      <mountedDevice    deviceIndex="0" Dvendor="Silicon Labs:21" Dname="EFM32WG990F256"/>
      <compatibleDevice deviceIndex="0" Dvendor="Silicon Labs:21" DsubFamily="EFM32WG990"/>
      <feature type="Button"     n="3"             name="Push-buttons: Reset, 2x User"/>
      <feature type="LED"        n="6"             name="LEDs: 4x Status, 2x User"/>
      <feature type="DIO"                          name="Breakout pads for easy access to I/O pins"/>
      <feature type="DIO"                          name="20 pin expansion header"/>
      <feature type="Touch"      n="1"             name="Capacitive touch slider"/>
      <feature type="LCD"        n="1"  m="8.20"   name="160 segment Energy Micro LCD"/>
      <feature type="USB"        n="1"             name="USB Micro-AB (OTG) connector"/>
      <feature type="ROM"        n="1"             name="32 MB NAND-Flash"/>
      <feature type="LightSens"  n="1"             name="Ambient Light Sensor"/>
      <feature type="SensOther"  n="1"             name="Inductive-capacitive metal sensor"/>
      <feature type="PWR"        n="5"             name="USB Powered"/>
      <feature type="Batt"       n="1"             name="CR2032 battery"/>
      <feature type="ODbg"       n="1"             name="Onboard SEGGER J-Link USB debugger"/>
    </board>
  </boards>

  <examples>
    <example name="CMSIS-RTOS Blinky" doc="Abstract.txt" folder="Boards/SiliconLabs/EFM32WG_STK3800/Blinky">
      <description>CMSIS-RTOS based Blinky example</description>
      <board name="EFM32WG-STK3800" vendor="Silicon Labs"/>
      <project>
        <environment name="uv" load="Blinky.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <component Cclass="CMSIS" Cgroup="RTOS"/>
        <category>Getting Started</category>
        <category>CMSIS-RTX</category>
      </attributes>
    </example>
  </examples>

</package>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>lwIP: TCP only</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">lwIP
   &#160;<span id="projectnumber">2.1.2</span>
   </div>
   <div id="projectbrief">Lightweight IP stack</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__netconn__tcp.html','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#define-members">Macros</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">TCP only<div class="ingroups"><a class="el" href="group__api.html">APIs</a> &raquo; <a class="el" href="group__sequential__api.html">Sequential-style APIs</a> &raquo; <a class="el" href="group__netconn.html">Netconn API</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ga43e3f4c2169dec0f666c502e490416b7"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__netconn__tcp.html#ga43e3f4c2169dec0f666c502e490416b7">netconn_listen</a>(conn)&#160;&#160;&#160;<a class="el" href="group__netconn__tcp.html#ga84333ba8e7cdf45558d2b4795f53265d">netconn_listen_with_backlog</a>(conn, <a class="el" href="group__lwip__opts__tcp.html#ga93cce3f47e33df11248c908d1775bacf">TCP_DEFAULT_LISTEN_BACKLOG</a>)</td></tr>
<tr class="separator:ga43e3f4c2169dec0f666c502e490416b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafea5e9b90770a7c6cd0762ceb65e5b46"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__netconn__tcp.html#gafea5e9b90770a7c6cd0762ceb65e5b46">netconn_write</a>(conn,  dataptr,  size,  apiflags)&#160;&#160;&#160;<a class="el" href="group__netconn__tcp.html#gacf9ce6f71652739d6be2ca83f7c423bf">netconn_write_partly</a>(conn, dataptr, size, apiflags, NULL)</td></tr>
<tr class="separator:gafea5e9b90770a7c6cd0762ceb65e5b46"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga84333ba8e7cdf45558d2b4795f53265d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__infrastructure__errors.html#gaf02d9da80fd66b4f986d2c53d7231ddb">err_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__netconn__tcp.html#ga84333ba8e7cdf45558d2b4795f53265d">netconn_listen_with_backlog</a> (struct <a class="el" href="structnetconn.html">netconn</a> *conn, u8_t backlog)</td></tr>
<tr class="separator:ga84333ba8e7cdf45558d2b4795f53265d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga13593148f60f7bbc6a505b567f175d69"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__infrastructure__errors.html#gaf02d9da80fd66b4f986d2c53d7231ddb">err_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__netconn__tcp.html#ga13593148f60f7bbc6a505b567f175d69">netconn_accept</a> (struct <a class="el" href="structnetconn.html">netconn</a> *conn, struct <a class="el" href="structnetconn.html">netconn</a> **new_conn)</td></tr>
<tr class="separator:ga13593148f60f7bbc6a505b567f175d69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6893cb7648733d1f05696bac94e10490"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__infrastructure__errors.html#gaf02d9da80fd66b4f986d2c53d7231ddb">err_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__netconn__tcp.html#ga6893cb7648733d1f05696bac94e10490">netconn_recv_tcp_pbuf</a> (struct <a class="el" href="structnetconn.html">netconn</a> *conn, struct <a class="el" href="structpbuf.html">pbuf</a> **new_buf)</td></tr>
<tr class="separator:ga6893cb7648733d1f05696bac94e10490"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabb8a242c445ef928c23258a2b2344294"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__infrastructure__errors.html#gaf02d9da80fd66b4f986d2c53d7231ddb">err_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__netconn__tcp.html#gabb8a242c445ef928c23258a2b2344294">netconn_recv_tcp_pbuf_flags</a> (struct <a class="el" href="structnetconn.html">netconn</a> *conn, struct <a class="el" href="structpbuf.html">pbuf</a> **new_buf, u8_t apiflags)</td></tr>
<tr class="separator:gabb8a242c445ef928c23258a2b2344294"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacf9ce6f71652739d6be2ca83f7c423bf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__infrastructure__errors.html#gaf02d9da80fd66b4f986d2c53d7231ddb">err_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__netconn__tcp.html#gacf9ce6f71652739d6be2ca83f7c423bf">netconn_write_partly</a> (struct <a class="el" href="structnetconn.html">netconn</a> *conn, const void *dataptr, size_t size, u8_t apiflags, size_t *bytes_written)</td></tr>
<tr class="separator:gacf9ce6f71652739d6be2ca83f7c423bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga25bb1c1c9928f91f53149a026e2e2624"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__infrastructure__errors.html#gaf02d9da80fd66b4f986d2c53d7231ddb">err_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__netconn__tcp.html#ga25bb1c1c9928f91f53149a026e2e2624">netconn_close</a> (struct <a class="el" href="structnetconn.html">netconn</a> *conn)</td></tr>
<tr class="separator:ga25bb1c1c9928f91f53149a026e2e2624"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6ec6b2cf7b0f59e9371e38ae7dea2a63"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__infrastructure__errors.html#gaf02d9da80fd66b4f986d2c53d7231ddb">err_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__netconn__tcp.html#ga6ec6b2cf7b0f59e9371e38ae7dea2a63">netconn_shutdown</a> (struct <a class="el" href="structnetconn.html">netconn</a> *conn, u8_t shut_rx, u8_t shut_tx)</td></tr>
<tr class="separator:ga6ec6b2cf7b0f59e9371e38ae7dea2a63"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>TCP only functions </p>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a id="ga43e3f4c2169dec0f666c502e490416b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga43e3f4c2169dec0f666c502e490416b7">&#9670;&nbsp;</a></span>netconn_listen</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define netconn_listen</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">conn</td><td>)</td>
          <td>&#160;&#160;&#160;<a class="el" href="group__netconn__tcp.html#ga84333ba8e7cdf45558d2b4795f53265d">netconn_listen_with_backlog</a>(conn, <a class="el" href="group__lwip__opts__tcp.html#ga93cce3f47e33df11248c908d1775bacf">TCP_DEFAULT_LISTEN_BACKLOG</a>)</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="gafea5e9b90770a7c6cd0762ceb65e5b46"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gafea5e9b90770a7c6cd0762ceb65e5b46">&#9670;&nbsp;</a></span>netconn_write</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define netconn_write</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">conn, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">dataptr, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">size, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">apiflags&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;<a class="el" href="group__netconn__tcp.html#gacf9ce6f71652739d6be2ca83f7c423bf">netconn_write_partly</a>(conn, dataptr, size, apiflags, NULL)</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga13593148f60f7bbc6a505b567f175d69"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga13593148f60f7bbc6a505b567f175d69">&#9670;&nbsp;</a></span>netconn_accept()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__infrastructure__errors.html#gaf02d9da80fd66b4f986d2c53d7231ddb">err_t</a> netconn_accept </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structnetconn.html">netconn</a> *&#160;</td>
          <td class="paramname"><em>conn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structnetconn.html">netconn</a> **&#160;</td>
          <td class="paramname"><em>new_conn</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Accept a new connection on a TCP listening netconn.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">conn</td><td>the TCP listen netconn </td></tr>
    <tr><td class="paramname">new_conn</td><td>pointer where the new connection is stored </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>ERR_OK if a new connection has been received or an error code otherwise </dd></dl>

</div>
</div>
<a id="ga25bb1c1c9928f91f53149a026e2e2624"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga25bb1c1c9928f91f53149a026e2e2624">&#9670;&nbsp;</a></span>netconn_close()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__infrastructure__errors.html#gaf02d9da80fd66b4f986d2c53d7231ddb">err_t</a> netconn_close </td>
          <td>